buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.0.1")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'org.springframework.boot' version '3.0.1'
    id "io.spring.dependency-management" version "1.1.0"
    id 'jacoco'
}

bootJar {
    archivesBaseName = 'tourGuide'
}


repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

sourceCompatibility = 19
targetCompatibility = 19

dependencies {

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation group: 'org.javamoney', name: 'moneta', version: '1.4.2'

    implementation(name:'gpsUtil', ext:'jar')
    implementation(name:'RewardCentral', ext:'jar')
    implementation(name:'TripPricer', ext:'jar')
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.0.1'


    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.2'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '3.0.1'
    testImplementation group: 'org.apache.maven.plugins', name: 'maven-failsafe-plugin', version: '3.0.0-M8'
    implementation group: 'org.apache.maven.plugins', name: 'maven-surefire-plugin', version: '3.0.0-M8'

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        csv.required = false
        xml.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/configuration/*',
                              '**/dto/*',
                              '**/tracker/*',
                              '**/model/*',])
        }))
    }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}
